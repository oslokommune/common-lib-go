// Code generated by mockery v2.38.0. DO NOT EDIT.

package queue

import mock "github.com/stretchr/testify/mock"

// MockActiveMQApi is an autogenerated mock type for the ActiveMQApi type
type MockActiveMQApi struct {
	mock.Mock
}

// Disconnect provides a mock function with given fields:
func (_m *MockActiveMQApi) Disconnect() {
	_m.Called()
}

// Publish provides a mock function with given fields: topic, message, header
func (_m *MockActiveMQApi) Publish(topic string, message string, header ...Header) error {
	_va := make([]interface{}, len(header))
	for _i := range header {
		_va[_i] = header[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, topic, message)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, ...Header) error); ok {
		r0 = rf(topic, message, header...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockActiveMQApi creates a new instance of MockActiveMQApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockActiveMQApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockActiveMQApi {
	mock := &MockActiveMQApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
